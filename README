Genetic Algorithm PID Controller Tuner
-------------------------------------

Overview
--------

Genetic-algorithm-pid-controller-tuner is an example of using a genetic algorithm to tune a PID controller.

A PID controller is any controller that uses a combination of integral, proportional, and derivative parameters (I, P, D) to
follow some target value. We integrate, derive, and multiply the distance from our target by certain constants. Call them (a, b, c)

So our "velocity towards the target value" is the function f(x) = a*I(x) + b*P(x) + c*D(x) where "x" is the current distance
from the target location.

In our example, we have a robot following a theoretical line. The line randomly walks about the origin "0" at each timestep. We use
a genetic algorithm to find how fit our robot is to follow the line.

The application outputs some pretty cool graphs that show how the values of (a, b, c) evolve over time

News
---------------------------
08/31/2013 : I'm currently overhauling the project and moving it to a new architecture. The application will consist of four main modules:
    - Algorithm, which will house the genetic algorithm logic
    - Map, which creates or loads a map over which the robot runs
    - Chromosome, which defines the chromosome (a, b, c), which are also known as (Ki, Kp, Kd)
    - Simulation, which contains methods for running the simulation.
We will also be storing configuration parameters in the config.py file in the main directory.

Stay tuned!


Possible Future Improvements
----------------------------

- Reduce premature convergence on local minima.
- Add parallel populations who independently evolve and then merge
- Improve Line Generation algorithm to make it change smoothly in one direction or the other.


Resources
---------

- The code is self documented
- An introduction to genetic algorithms can be found here: http://www.obitko.com/tutorials/genetic-algorithms/


Dependencies
------------

- Python 2.7
- Numpy 1.5
- Matplotlib (pip install matplotlib)
